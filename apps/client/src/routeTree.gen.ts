/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as appBuilderRouteRouteImport } from './routes/(app)/builder/route'
import { Route as appBuilderQueryRouteRouteImport } from './routes/(app)/builder/query/route'
import { Route as appBuilderFormRouteRouteImport } from './routes/(app)/builder/form/route'
import { Route as appBuilderQueryIndexRouteImport } from './routes/(app)/builder/query/index'
import { Route as appBuilderFormIndexRouteImport } from './routes/(app)/builder/form/index'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api/users'
import { ServerRoute as ApiUsersUserIdServerRouteImport } from './routes/api/users.$userId'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const appBuilderRouteRoute = appBuilderRouteRouteImport.update({
  id: '/(app)/builder',
  path: '/builder',
  getParentRoute: () => rootRouteImport,
} as any)
const appBuilderQueryRouteRoute = appBuilderQueryRouteRouteImport.update({
  id: '/query',
  path: '/query',
  getParentRoute: () => appBuilderRouteRoute,
} as any)
const appBuilderFormRouteRoute = appBuilderFormRouteRouteImport.update({
  id: '/form',
  path: '/form',
  getParentRoute: () => appBuilderRouteRoute,
} as any)
const appBuilderQueryIndexRoute = appBuilderQueryIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appBuilderQueryRouteRoute,
} as any)
const appBuilderFormIndexRoute = appBuilderFormIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => appBuilderFormRouteRoute,
} as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersUserIdServerRoute = ApiUsersUserIdServerRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => ApiUsersServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/builder': typeof appBuilderRouteRouteWithChildren
  '/builder/form': typeof appBuilderFormRouteRouteWithChildren
  '/builder/query': typeof appBuilderQueryRouteRouteWithChildren
  '/builder/form/': typeof appBuilderFormIndexRoute
  '/builder/query/': typeof appBuilderQueryIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/builder': typeof appBuilderRouteRouteWithChildren
  '/builder/form': typeof appBuilderFormIndexRoute
  '/builder/query': typeof appBuilderQueryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/(app)/builder': typeof appBuilderRouteRouteWithChildren
  '/(app)/builder/form': typeof appBuilderFormRouteRouteWithChildren
  '/(app)/builder/query': typeof appBuilderQueryRouteRouteWithChildren
  '/(app)/builder/form/': typeof appBuilderFormIndexRoute
  '/(app)/builder/query/': typeof appBuilderQueryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/builder'
    | '/builder/form'
    | '/builder/query'
    | '/builder/form/'
    | '/builder/query/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/builder' | '/builder/form' | '/builder/query'
  id:
    | '__root__'
    | '/'
    | '/(app)/builder'
    | '/(app)/builder/form'
    | '/(app)/builder/query'
    | '/(app)/builder/form/'
    | '/(app)/builder/query/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appBuilderRouteRoute: typeof appBuilderRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$userId': typeof ApiUsersUserIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/users' | '/api/users/$userId'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/users' | '/api/users/$userId'
  id: '__root__' | '/api/users' | '/api/users/$userId'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/builder': {
      id: '/(app)/builder'
      path: '/builder'
      fullPath: '/builder'
      preLoaderRoute: typeof appBuilderRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(app)/builder/query': {
      id: '/(app)/builder/query'
      path: '/query'
      fullPath: '/builder/query'
      preLoaderRoute: typeof appBuilderQueryRouteRouteImport
      parentRoute: typeof appBuilderRouteRoute
    }
    '/(app)/builder/form': {
      id: '/(app)/builder/form'
      path: '/form'
      fullPath: '/builder/form'
      preLoaderRoute: typeof appBuilderFormRouteRouteImport
      parentRoute: typeof appBuilderRouteRoute
    }
    '/(app)/builder/query/': {
      id: '/(app)/builder/query/'
      path: '/'
      fullPath: '/builder/query/'
      preLoaderRoute: typeof appBuilderQueryIndexRouteImport
      parentRoute: typeof appBuilderQueryRouteRoute
    }
    '/(app)/builder/form/': {
      id: '/(app)/builder/form/'
      path: '/'
      fullPath: '/builder/form/'
      preLoaderRoute: typeof appBuilderFormIndexRouteImport
      parentRoute: typeof appBuilderFormRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$userId': {
      id: '/api/users/$userId'
      path: '/$userId'
      fullPath: '/api/users/$userId'
      preLoaderRoute: typeof ApiUsersUserIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
  }
}

interface appBuilderFormRouteRouteChildren {
  appBuilderFormIndexRoute: typeof appBuilderFormIndexRoute
}

const appBuilderFormRouteRouteChildren: appBuilderFormRouteRouteChildren = {
  appBuilderFormIndexRoute: appBuilderFormIndexRoute,
}

const appBuilderFormRouteRouteWithChildren =
  appBuilderFormRouteRoute._addFileChildren(appBuilderFormRouteRouteChildren)

interface appBuilderQueryRouteRouteChildren {
  appBuilderQueryIndexRoute: typeof appBuilderQueryIndexRoute
}

const appBuilderQueryRouteRouteChildren: appBuilderQueryRouteRouteChildren = {
  appBuilderQueryIndexRoute: appBuilderQueryIndexRoute,
}

const appBuilderQueryRouteRouteWithChildren =
  appBuilderQueryRouteRoute._addFileChildren(appBuilderQueryRouteRouteChildren)

interface appBuilderRouteRouteChildren {
  appBuilderFormRouteRoute: typeof appBuilderFormRouteRouteWithChildren
  appBuilderQueryRouteRoute: typeof appBuilderQueryRouteRouteWithChildren
}

const appBuilderRouteRouteChildren: appBuilderRouteRouteChildren = {
  appBuilderFormRouteRoute: appBuilderFormRouteRouteWithChildren,
  appBuilderQueryRouteRoute: appBuilderQueryRouteRouteWithChildren,
}

const appBuilderRouteRouteWithChildren = appBuilderRouteRoute._addFileChildren(
  appBuilderRouteRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersUserIdServerRoute: typeof ApiUsersUserIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersUserIdServerRoute: ApiUsersUserIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appBuilderRouteRoute: appBuilderRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
